fineract-ui:
  replicaCount: 1
  repository: "795369207337.dkr.ecr.eu-west-1.amazonaws.com/mifos-ui"
  pullPolicy: IfNotPresent
  tag: "e9d0d28"


  secretMounts:
     - mountPath: "/etc/ssl/keys/cert.pem"
       mountFileName: "cert.pem"
     - mountPath: "/etc/ssl/keys/key.pem"
       mountFileName: "key.pem"
     - mountPath: "/etc/nginx/conf.d/default.conf.template"
       mountFileName: "default.conf.template"

  env:
    FINERACT_DOMAIN: "a4b3afb82fab845e3a00f97e5bf395bc-624854607.eu-west-1.elb.amazonaws.com"
    FINERACT_BASE_URL: "/fineract-provider/"
    FINERACT_PROXY_URL: "https://backend-fineract-rest:8443"
    DOLLAR: "$"
    
  argsOverride: [
    "/bin/bash",
    "-c",
    "envsubst < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
  ]

  imagePullSecrets:
    - name: regcred 

  service:
    type: ClusterIP
    servicePorts:
      - port: 443
        containerPort: 443
        protocol: TCP
        name: https
      - port: 80
        containerPort: 80
        protocol: TCP
        name: http
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  serviceAccount:
    name: application-sa

  ingress:
    enabled: true
    # tls:
    # - hosts:
    #   - "a4b3afb82fab845e3a00f97e5bf395bc-624854607.eu-west-1.elb.amazonaws.com"
    #   secretName: "fineract-tls"
    host: "a4b3afb82fab845e3a00f97e5bf395bc-624854607.eu-west-1.elb.amazonaws.com"
    path: "/"
    pathType: ImplementationSpecific
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod-issuer"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"  

  resources:
    limits:
      cpu: 1000m
      memory: 1024Mi
    requests:
      cpu: 512m
      memory: 512Mi

  # livenessProbe:
  #   failureThreshold: 3
  #   httpGet:
  #     path: /
  #     port: 80
  #     scheme: HTTP
  #   initialDelaySeconds: 30
  #   periodSeconds: 120
  #   successThreshold: 1
  #   timeoutSeconds: 10
  # readinessProbe:
  #   failureThreshold: 3
  #   httpGet:
  #     path: /
  #     port: 80
  #     scheme: HTTP
  #   initialDelaySeconds: 5
  #   periodSeconds: 10
  #   successThreshold: 1
  #   timeoutSeconds: 5
